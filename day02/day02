一、自定义指令
    1.内置指令
        v-if/v-else-if/v-else
        v-for
        v-on/v-bind/v-model
        v-show
        v-html
    2.自定义指令
        原因：内置指令在很多时候，比较偏向于一些工具性的指令，比较通用，但如果需要和具体的业务相关，有可能就无法满足需求，就得学会自定义指令
    3.用法
        1.创建
            new Vue({
                    el: '#example',
                    template: "",
                    data: {},
                    directives:{
                        change:{
                            bind:function (el) {
                                //当指令成功调用后，将执行的一个方法
                                console.log("指令调用成功!")
                            },
                            update:function (el,bindings) {
                                //调用指令时穿入参数，当参数发生变化时，将会执行指令内部update方法
                                console.log(bindings.value);
                            },
                            unbind:function () {
                                console.log("in unbind");
                            }
                        }
                    }
                });
        2.使用
            <div id="example">
                <h2 v-change>hello custom directive</h2>
            </div>
    4.自定义指令的进阶知识
        1.自定义指令的方法
            bind:首次绑定
            update:当通过指令传递过来的参数有变化时候
            unbind:解除绑定
        2.方法有参数
            el:调用指令的元素
            bindings:是一个对象，rawName/value/oldValue
        规范：创建时驼峰，使用时烤串

二、过滤器
    过滤器：实现数据的筛选、过滤、格式化
    在vuejs的1.*有内置过滤器，但是2.0之后，只保留了一个自定义接口
    1.用法
        1.创建
            new Vue({
                    el: '#example',
                    template: "",
                    data: {},
                    filters:{
                        currency:function (value,arg1,arg2) {
                            //过滤器的本质就是一个有参数，有返回值的方法
                            return "￥"+value;
                        }
                    }
                });

        2.使用
        <h1>{{nowPrice | currency(arg1,arg2)}}</h1>

        3.过滤器中如何实现参数的传递和接收
        扩展：
            1.过滤器支持多重过滤
                <h1>{{nowPrice | currency(arg1,arg2) | myFilter(arg1,arg2)}}</h1>
            2.一个优秀的开源项目
                https://github.com/wy-ei/vue-filter
三、组件
    1.如果项目中需要反复用到的部分
    组件：可被反复使用，带有特定功能的视图
        分类：全局组件，局部组件
    2.创建和使用
        1.创建
            1.全局组件
                Vue.component('myComponent',{
                    template:"<h1>hello world</h1>"
                });
            2.局部组件
                new Vue({
                    components:{
                        "my-component":{
                            template:"<h1></h1>"
                        }
                    }
                });
        2.使用
            <my-component></my-component>
    3.注意事项
        1.组件不能直接返回多个元素，要在一个根元素下
        2.组件可以嵌套,在父组件的template中
    4.扩展
        Vue.directive("changeBgColor",{
            bind:function (el,bindings) {
               el.style.backgroundColor = bindings.value;
            }
        });
        Vue.filter("myCurrency",function (value) {
            return "$"+value;
        });
    创建组件的其他方式：
        1.指定一个script标签，并指定type="text/x-template",并指定一个id="myTemplate"

四、组件的生命周期==>钩子函数
    分为4个阶段：
        create/mount/update/destroy
        create:初始化数据，准备工作
            beforeCreate
            created
        mount:和挂载到DOM树相关
            beforeMount
            mounted
        update:当数据发生变化时,根据业务逻辑实施一些处理
            beforeUpdate
            updated
        destroy:清理工作
            beforeDestroy
            destroyed
